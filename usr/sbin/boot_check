#!/bin/sh /etc/rc.common

#this script will run by /etc/init.d/rcS after all rc script.

elog(){
	tmsg="$@"
	logger -t boot_check "boot_check[${$}]: $tmsg"
	echo "`date` boot_check[${$}]: $tmsg" >> /dev/console
}

start() {
	# 备份上网信息
	uci_wan_proto=`uci get network.wan.proto`
	nvram set nv_wan_type=$uci_wan_proto
	if [ "$uci_wan_proto" = "pppoe" ]; then
		uci_pppoe_name=`uci get network.wan.username`
		uci_pppoe_pwd=`uci get network.wan.password`
		nvram set nv_pppoe_name=$uci_pppoe_name
		nvram set nv_pppoe_pwd=$uci_pppoe_pwd
	fi
	if [ "$uci_wan_proto" = "static" ]; then
		uci_wan_ip=`uci get network.wan.ipaddr`
		uci_wan_gateway=`uci get network.wan.gateway`
		uci_wan_dns=`uci get network.wan.dns`
		uci_wan_netmask=`uci get network.wan.netmask`
		uci_wan_dns1=`echo "$uci_wan_dns" | awk -F ' ' '{print $1}'`
		uci_wan_dns2=`echo "$uci_wan_dns" | awk -F ' ' '{print $2}'`
		nvram set nv_wan_ip=$uci_wan_ip
		nvram set nv_wan_gateway=$uci_wan_gateway
		nvram set nv_wan_dns1=$uci_wan_dns1
		nvram set nv_wan_dns2=$uci_wan_dns2
		nvram set nv_wan_netmask=$uci_wan_netmask
	fi
	nvram commit

	# 如果刚升级的系统，需要发送push
	upgrad_flag=`nvram get flag_upgrade_push`
	# flag 1 is need push
	if [ "$upgrad_flag" = "1" ] ; then
		nvram unset flag_upgrade_push
		feedPush "{\"type\":3}"
	fi

	#升级上来的rom没设置过privacy的默认开启
        flg_privacy=`uci get xiaoqiang.common.PRIVACY 2>/dev/null`
        if [ -z "$flg_privacy" ]; then
                uci set xiaoqiang.common.PRIVACY=1
                uci commit xiaoqiang
        fi

	# boot finished
	gpio 1 1
        gpio 2 1

        # blue led is okay
        gpio 3 0

	if [ "$ft_mode" = "1" ]
	then
		if [ "$ft_ret" = "0" ]
		then
			elog "INFO: boot_check failed $ft_ret"
			dmesg > /data/usr/log/dmesg.log
			#red led is set
			gpio 1 0
			gpio 2 1
			gpio 3 1
		fi
	fi

	#check merge reboot require
	cat $REBOOTFLAGFILE 2>/dev/null | grep -q '^REBOOT=1'
	if [ $? -eq 0 ]
		then
		#TODO: fixme
		elog "INFO: reboot for previous script required. --- no reboot, feature disabled."
		#sleep 1
		#reboot
	fi

	#stat_points
	flg_stat=`nvram get gel_restart_hard_count`
	if [ "$flg_stat" = "1" ]; then
		logger stat_points_none gel_restart_hard_count=1
		nvram unset gel_restart_hard_count
	fi

        flg_init_pwd=`nvram get flag_init_root_pwd`
        if [ "$flg_init_pwd" = "1" ]; then
                init_pwd=`mkxqimage -I`
                (echo $init_pwd; sleep 1; echo $init_pwd) | passwd root
                nvram unset flag_init_root_pwd
        fi

	nvram set no_wifi_dev_times=0
	nvram set flag_ota_reboot=0
	nvram set flag_boot_success=1
	nvram unset flag_boot_recovery

	flg_ramfs=`nvram get flag_ramfs_upstat`
	if [ "$flg_ramfs" = "1" ]; then
		nvram unset flag_ramfs_upstat
	fi

	md5=`md5sum /dev/mtd4  | awk '{print $1}'`
	nvram set normal_firmware_md5=$md5

	nvram commit

	# daemon: monitor reset button status
	btnd reset 30 & 2>/dev/null

        if [ -f "/data/usr/log/panic.message" ]; then
                gzip /data/usr/log/panic.message
        fi
        if [ -f "/data/usr/log/panic.message.gz" ]; then
                mtd_crash_log -u "/data/usr/log/panic.message.gz"

                if [ $? -eq 0 ]; then
                        rm /data/usr/log/panic.message.gz
                fi
        fi
        elog "Booting up finished."
}

stop() {
	echo "stop"
}
